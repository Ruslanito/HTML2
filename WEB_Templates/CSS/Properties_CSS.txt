**** (Блочная модель CSS)The CSS Box Model:
Content(содержимое) - Padding(поле) (transparent) - Border(рамка) - Margin (отступ)(transparent)
Top - Right - Bottom - Left (TRouBLe) свойства работают в такой последовательности.
CSS использует блочную модель для определения насколько большимим являются блоки и как их разместить (блочная модель ипользуется также для вычисления актуальной высоты и ширины html-элемента).
**** (Общая длина элемента )total width of an element:
margin left + border left + padding left + width of content + padding right + border right + margin right
   При установке backdround-color коробки цвет покрывает область контента, вместе с внутренними полями (padding)
**** (Общая высота элемента)total height of an element:
margin top + border top + padding top + height of content + padding bottom + border bottom + margin bottom
**** border (рамка) позволяет изменять рамки html-элемента:
- размер (можно отдeльным свойством: border-width)
- стиль (можно отдeльным свойством: border-style)
- цвет (можно отдeльным свойством: border-color)
   HTML  <p>This is an example of a solid border.</p>
   CSS   p {
         padding: 10px;
         border: 5px solid green;
         }
Свойства рамки не будут работать пока не установлено свойство border-style: - none - отсутствие рамки
- dotted - точечная рамка
- dashed - пунктирная рамка
- double - двойная рамка
- groove - выемкой
- ridge - выступом
- inset - тени изнутри
- outset - тень снаружи
- hidden - невидимая
В CSS возможно определить различные рамки для разных сторон, используя следующие свойства: border-top-style(стиль верхней рамки), border-right-style(стиль правой рамки), border-bottom-style(стиль нижней рамки), и border-left-style(стиль левой рамки) для соответствующих сторон.
   HTML  <p class="none">This paragraph has no border.</p>
         <p class="dotted">This is a dotted border.</p>
         <p class="dashed">This is a dashed border.</p>
         <p class="double">This is a double border.</p>
         <p class="groove">This is a grooved border.</p>
         <p class="ridge">This is a ridged border.</p>
         <p class="inset">This is an inset border.</p>
         <p class="outset">This is an outset border.</p>
         <p class="hidden">This is a hidden border.</p>
   CSS   p.none {border-style: none;}
         p.dotted {border-style: dotted;}
         p.dashed {border-style: dashed;}
         p.double {border-style: double;}
         p.groove {border-style: groove;}
         p.ridge {border-style: ridge;}
         p.inset {border-style: inset;}
         p.outset {border-style: outset;}
         p.hidden {border-style: hidden;}
**** width and height (ширина и высота элемента): для установки ширины и высоты элемента <div> равной 100px необходимо
   HTML <div>The total width and height of this element is 100px.</div>
   CSS  div {
   border: 5px solid green;
   width: 90px;
   height: 90px;
}
   Общая ширина блока 90px+5px(border)+5px(border)
   Ширина и высота элемента может быть также присвоена с помощью использования процентов. В нижеуказанном примере ширина элемента задана в процентах, а высота в пикселях:
   HTML  <div>The total width of this element is <strong>100%</strong> and
         the total height is <strong>100px</strong> .</div>
   CSS   div {
         border: 5px solid green;
         width: 100%;
         height: 90px;
}
   Для того, чтобы установить минимальную и максимальную высоту и ширину элемента, вы можете использовать следующие свойства:
- min-width - минимальная ширина элемента
- min-height - минимальная высота элемента
- max-width - максимальная ширина элемента
- max-height - максимальная высота элемента
   В нижеуказанном примере, мы установили минимальную высоту и максимальную ширину различных параграфов равных 100px.
   HTML  <p class="first">The <strong>minimum height </strong> of this
         paragraph is set to 100px.</p>
         <p class="second">The<strong> maximum width </strong> of this paragraph is set to 100px.</p>
   CSS   p.first {
         border: 5px solid green;
         min-height: 100px;
         }
         p.second {
            border: 5px solid green;
            max-width: 100px;
         }
****background-color применяется для установки фонового цвета элемента
   HTML  <h1>This is a heading</h1>
   CSS   body {
         background-color: #C0C0C0;
         }
         h1 {
            background-color: rgb(135,206,235);
         }
         p {
            background-color: LightGreen;
         }
**** background-image утсанавливает одно или несколько фоновых изображений в элементе (url определяет путь к изображению, поддерживаются и абсолютный и относительный пути.)
   CSS   body {
         background-image: url("css_logo.png");
         background-color: #e9e9e9;
         }
   По умолчанию, фоновое изображение размещается в левом верхнем углу элемента и повторяется вертикально и горизонтально, чтобы покрыть весь элемент.
   Свойство background-image
   Фоновое изображение может быть установлено не только для всей страницы, но также и для отдельного элемента (Чтобы указать более одного изображения необходимо лишь перечислить их  URL через запятые.).
   HTML  <p>This paragraph has a background image.</p>
   СCSS  p {
         padding: 30px;
         background-image: url("green_photo.jpg");
         color: white;
         }
**** background-repeat определяет, как будет повторяться фоновое изображение:
- repeat-y по вертикали
- repeat-x по горизонтали
- repeat в обе стороны
- no-repeat не повторялось вообще (показано только 1 раз)
- inherit как у родителя элемента
   CSS   body {
         background-image: url("css_logo.png");
         background-repeat: repeat-x;
         }
   Например, мы установим фон элемента body, чтобы он повторялся только горизонтально. Если мы установим значение свойства background-repeat какого-нибудь параграфа чтобы оно наследовалось, то оно будет равно значению свойства элемента body
   CSS   body {
         background-image: url("css_logo.png");
         background-repeat: repeat-x;
         }
         p {
         background-image: url("css_logo.png");
         background-repeat: inherit;
         margin-top: 100px;
         padding: 40px;
         }
**** background-attachment устанавливает, будет ли прокручиваться фоновое изображение вместе с содержимым элемента:
- fixed фоновое изображение не будет двигаться с элементом
- scroll фоновое изображение будет двигаться с элементом
- inherit наследуется от родительского элемента
   CSS   body {
         background-image: url("css_logo.png");
         background-repeat: no-repeat;
         background-attachment: fixed;
         }
**** list-style-type позволяют нам устанавливать различные списки маркеров. В HTML существует два типа списков:
- unordered lists(неупорядоченные списки) (<ul>) - элементы списка обозначаются маркерами
- ordered lists(упорядоченные списки) (<ol>) - элементы списка обозначаются числами, или буквами
   В CSS, списки могут быть стилизованы дальше, а изображения могут использоваться в качестве элементов списка:
   - circle
   - square
   - decimal
   - disc
   - lower-alpha ....
   HTML <ol class="lower-alpha">
            <li>Red</li>
            <li>Green</li>
            <li>Blue</li>
         </ol>
         <ul class="circle">
            <li>Red</li>
            <li>Green</li>
            <li>Blue</li>
         </ul>
         <ul class="square">
            <li>Red</li>
            <li>Green</li>
            <li>Blue</li>
         </ul>
   CSS   ol.lower-alpha {
         list-style-type: lower-alpha;
         }
         ul.circle {
            list-style-type: circle;
         }
         ul.square {
            list-style-type: square;
         }
**** list-style-image - устанавливает изображение в качестве маркера списка
**** list-style-position - устанавливает, как будет размещаться маркер относительно текста (inside - внутри; outside - снаружи(по-умолчанию))
   HTML  <p>The following list has list-style-position:
         <strong>inside</strong>.</p>
         <ul>
            <li>Red</li>
            <li>Green</li>
            <li>Blue</li>
         </ul>
   CSS   ul {
            list-style-image: url("logo.jpg");
            list-style-position: inside;
         }
         Свойство list-style

   Свойство list-style это универсальное свойство для установки list-style-type(типа), list-style-image(изображения) и list-style-position(положения). Оно используется для установки всех трех свойств в одном объявлении:
      ul {
         list-style: square outside none;
      }
      равноценно:
      ul {
         list-style-type: square;
         list-style-position: outside;
         list-style-image: none;
      }
   Если одно из значений свойства пропущено, то будет использовано значение по умолчанию.
**** border-collapse определяет будут ли рамки таблицы объудинена в одну линию или у каждой ячейки будет своя рамка. Если рамки разделены, то может быть использовано свойство border-spacing для изменения расстояния между границами ячеек в таблице.
   HTML  <table border="1">
         <tr>
           <td>Red</td>
           <td>Green</td>
         </tr>
         <tr>
            <td>Blue</td>
            <td>Yellow</td>
         </tr>
         </table>
   CSS   table {
            border-collapse: separate;
            border-spacing: 20px 40px;
         }
**** caption-side определяет положение заголовка таблицы:
- top - вверху
- bottom - внизу
   HTML  <table border="1">
         <caption>Some of Our Courses</caption>
         <tr>
           <th>Course name</th>
           <th>Lessons</th>
           <th>Quizzes</th>
         </tr>
         </table>
   CSS   caption {
            caption-side: top;
         }
**** empty-cells определяет, отображать рамки и фон пустых ячеек в таблице, или нет:
- show - отображает границу вокруг ячейки и фон в ней
- hide - граница и фон в пустых ячейках не отображаются
   Далее представлено использование свойства empty-cells, которое прячет рамки пустых ячеек в элементе <table>.
   HTML  <table border="1">
           <tr>
             <td>HTML</td>
             <td>CSS</td>
           </tr>
           <tr>
             <td>JavaScript</td>
             <td></td>
           </tr>
         </table>
   CSS   table {
            border-collapse: separate;
            empty-cells: hide;
         }
**** table-layout определяет, каким образом подсчитывается ширина столбцов таблицы:
- auto - в случае, если ширина столбца или ячейки не задана точно, она будет зависеть от количества содержимого ячейки
- fixed - в случае, если ширина столбца или ячейки не задана точно, количество содержимого ячейки не будет влиять на ее ширину.
Шаблон таблицы по умолчанию имеет значение auto.
   HTML  <p>Table-layout is set to <strong>auto</strong></p>
         <table class="auto">
           <tr>
             <td width=“10%">500.000.000.000.000</td>
             <td width="90%">20.000</td>
           </tr>
         </table>

         <p>Table-layout is set to <strong>fixed</strong></p>
         <table class="fixed">
           <tr>
             <td width="10%">500.000.000.000.000</td>
             <td width="90%">20.000</td>
           </tr>
         </table>
   CSS  table {
            border-collapse: separate;
            width: 100%;
            border: 1px solid gray;
         }
         td {
            border: 1px solid gray;
         }
         table.auto {
            table-layout: auto;
         }
         table.fixed {
            table-layout: fixed;
         }
