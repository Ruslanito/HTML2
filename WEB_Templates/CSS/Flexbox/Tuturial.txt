Модуль Flexbox Layout (Flexible Box) направлен на то чтобы предоставить более эффективный способ расположения, выравнивания и распределения свободного пространства между элементами в контейнере, даже когда их размер заранее неизвестен и/или динамичен (поэтому слово "flex").
Основная идея гибкой (flex) разметки заключается в том, чтобы предоставить контейнеру возможность изменять ширину/высоту (и порядок) своих элементов, для того чтобы наилучшим образом заполнить доступное пространство (в основном для размещения на всех типах и размерах экранов). Flexbox контейнер расширяет элементы чтобы заполнить свободное пространство или сжимает их чтобы избежать переполнения.
**** display - строковый или блочный зависит от переданного значения. Включает flex-контекст для всех своих прямых, дочерних элементов.
CSS .container {
         display: flex; 
         }
CSS .flex-container {
    display: -webkit-flex; 
    display: flex; /*отображает контейнер как блочный элемент*/
    }
    .flex-container {
    display: -webkit-inline-flex;
    display: inline-flex; /*отображает контейнер как строчный элемент*/
    }
**** flex-direction - устанавливает основную ось, таким образом определяет направление элементов расположенных в контейнере. Flexbox (помимо опциональной обёртки) представляет собой концепцию однонаправленного макета. Думайте о flex-элементах, прежде всего как горизонтальных строках или вертикальных колонках.
CSS .container {
    flex-direction: row | row-reverse | column | column-reverse;
    }
- row (по умолчанию) -  слева направо в ltr; справа налево в rtl;
- row-reverse - справа налево в ltr; слева направо в rtl;
- column - тоже самое что row, только сверху вниз;
- column-reverse - тоже самое что row-reverse, только снизу вверх
**** flex-wrap - gо умолчанию, элементы будут пытаться заполнить только одну строк. Вы можете изменить это поведение и позволить элементам переноситься на следующую строку, при необходимости.
CSS .container{
  flex-wrap: nowrap | wrap | wrap-reverse;
}
- nowrap (по умолчанию) - все flex-элементы будут расположены на одной строке;
- wrap - flex-элементы будут расположены на нескольких строках, сверху вниз;
- wrap-reverse - flex-элементы будут расположены на нескольких строках, снизу вверх;
**** flex-flow - сокращение для свойств flex-direction и flex-wrap, которые вместе определяют основную и поперечные оси контейнера. По умолчанию: row nowrap
    flex-flow: <‘flex-direction’> || <‘flex-wrap’>
**** justify-content - определяет выравнивание вдоль основной оси. Это помогает распределить свободное пространство, оставшееся после того как все фиксированные и не фиксированные по ширине flex-элементы достигли максимального размера. Оно также помогает осуществлять некоторый контроль над выравниванием элементов, когда они переполняют строку.
- flex-start (по умолчанию) - элементы прижимаются к началу строки;
- flex-end - элементы прижимаются к концу строки;
- center - элементы располагаются по центру вдоль строки;
- space-between - элементы размещаются равномерно на линии; первый элемент находится в начале строки, последний элемент находится в конце строки;
- space-around - элементы размещаются равномерно на линии с одинаковым пространством возле них. Обратите внимание, что визуально пространство не одинаковое, так как у всех элементов одинаковое пространство с обеих сторон. У первого элемента будет одна единица пространства со стороны контейнера, но две единицы между ним и следующим элементом, потому что у следующего элемента также по одной единице с двух сторон.
CSS .container {
    justify-content: flex-start | flex-end | center | space-between | space-around | initial | inherit;
    }
**** align-items - определяет поведение flex-элементов вдоль поперечной оси на текущей строке. Думайте о нём как о justify-content, только для поперечной оси (перпендикулярной основной оси)
- flex-start - элементы размещаются в начале поперечной оси;
- flex-end - элементы размещаются в конце поперечной оси;
- center - элементы располагаются по центру поперечной оси;
- baseline - элементы выравниваются по базовой линии;
- stretch (по умолчанию) - растягиваются чтобы заполнить весь контейнер (по-прежнему соблюдают min-width/max-width).
CSS .container {
    align-items: flex-start | flex-end | center | baseline | stretch;
    }
**** align-content -  свойство не действует, когда есть только одна строка flex-элементов
- flex-start - строки располагаются в начале контейнера;
- flex-end - строки располагаются в конце контейнера;
- center - строки размещаются по центру контейнера;
- space-between - строки распределяются равномерно, первая строка располагается в начале контейнера, а последняя строка в конце;
- space-around - строки распределяются равномерно, с одинаковым расстоянием между ними;
- stretch (по умолчанию) - строки растягиваются по всей ширине, чтобы занять оставшееся пространство;
СSS .container {
    align-content: flex-start | flex-end | center | space-between | space-around | stretch;
    }

***** Свойства для дочерних элементов ******

**** order - управляет порядком, в котором располагаются элементы внутри контейнера (по умолчанию, все элементы располагаются в исходном для них порядке)
значение чем больше по значению тем оно выводится позднее
CSS .item {
    order: <integer>;
    }
**** flex-grow - определяет возможность элемента увеличиваться в размере, при необходимости. Оно принимает безразмерное значение в качестве пропорции, которое определяет какое количество свободного пространства внутри контейнера должен занимать элемент. Если у всех элементов свойство flex-grow установлено в 1, то свободное пространство внутри контейнера будет равномерно распределено между всеми элементами. Если у одного из элементов значение установлено в 2, то элемент будет занимать в два раза больше пространства, чем остальные (по крайней мере, попытается). Нельзя указывать отрицательные числа.
CSS .item {
    flex-grow: <number>; /* default 0 */
    }
**** flex-shrink - определяет возможность элемента уменьшаться в размере, при необходимости. Нельзя указывать отрицательные числа.
CSS .item {
    flex-shrink: <number>; /* default 1 */
    }
    