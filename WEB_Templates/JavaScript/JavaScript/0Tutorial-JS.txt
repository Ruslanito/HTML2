**** Типы переменных. Есть 5 «примитивных» типов: number, string, boolean, null, undefined и 6-й тип – объекты object.
Оператор typeof x позволяет выяснить, какой тип находится в x, возвращая его в виде строки.
**** Внешние скрипты, порядок исполнения
Если JavaScript-кода много – его выносят в отдельный файл, который подключается в HTML:
   JS <script src="/path/to/script.js"></script>
   или
   <script src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.3.0/lodash.js"></script>
   Чтобы подключить несколько скриптов, используйте несколько тегов:
   JS <script src="/js/script1.js"></script>
      <script src="/js/script2.js"></script>
Если указан атрибут src, то содержимое тега игнорируется. В одном теге SCRIPT нельзя одновременно подключить внешний скрипт и указать код. Нужно выбрать: либо SCRIPT идёт с src, либо содержит код.
**** Асинхронные скрипты: defer/async (только для внешних скриптов)
   Браузер загружает и отображает HTML постепенно. Особенно это заметно при медленном интернет-соединении: браузер не ждёт, пока страница загрузится целиком, а показывает ту часть, которую успел загрузить. Если браузер видит тег <script>, то он по стандарту обязан сначала выполнить его, а потом показать оставшуюся часть страницы. Такое поведение называют «синхронным». Как правило, оно вполне нормально, но есть важное следствие. Если скрипт – внешний, то пока браузер не выполнит его, он не покажет часть страницы под ним.
   Кардинально решить эту проблему помогут атрибуты async или defer.
Атрибут async: Поддерживается всеми браузерами, кроме IE9-. Скрипт выполняется полностью асинхронно. То есть, при обнаружении <script async src="..."> браузер не останавливает обработку страницы, а спокойно работает дальше. Когда скрипт будет загружен – он выполнится.
   JS <script src="1.js" async></script>
      <script src="2.js" async></script>
Атрибут defer: Поддерживается всеми браузерами, включая самые старые IE. Скрипт также выполняется асинхронно, не заставляет ждать страницу, но есть два отличия от async.
Первое – браузер гарантирует, что относительный порядок скриптов с defer будет сохранён (когда один скрипт зависит от первого...).
   JS <script src="1.js" defer></script>
      <script src="2.js" defer></script>
 То есть, в таком коде (с async) первым сработает тот скрипт, который раньше загрузится:А в таком коде (с defer) первым сработает всегда 1.js, а скрипт 2.js, даже если загрузился раньше, будет его ждать.
Второе отличие – скрипт с defer сработает, когда весь HTML-документ будет обработан браузером. Например, если документ достаточно большой…
   JS    <script src="async.js" async></script>
         <script src="defer.js" defer></script>
   То скрипт async.js выполнится, как только загрузится – возможно, до того, как весь документ готов. А defer.js подождёт готовности всего документа. Это бывает удобно, когда мы в скрипте хотим работать с документом, и должны быть уверены, что он полностью получен.
Если же нужно сохранить порядок выполнения, то есть добавить несколько скриптов, которые выполнятся строго один за другим, то используется свойство script.async = false
   JS function addScript(src){
        var script = document.createElement('script');
        script.src = src;
        script.async = false; // чтобы гарантировать порядок
        document.head.appendChild(script);
      }
      addScript('1.js'); // загружаться эти скрипты начнут сразу
      addScript('2.js'); // выполнятся, как только загрузятся
      addScript('3.js'); // но, гарантированно, в порядке 1 -> 2 -> 3
      
**** innerHTML(Text) + outerHTML(Text) insertAdjacentHTML (TextMethods) - применяется для двойных тегов.
      (<h1>Text</h1>)
   innerHTML и innerText - исполняется только внутри тэга
   outerHTML и outerText - исполняется за пределами тега (в т.ч. с его заменой)
   JS var s = document.getElementById('out3');
   s.innerHTML = s.innerHTML+" + <b> Text#3</b>";

**** insertAdjacentHTML(TextMethods) - применяется для двойных тегов:
- beforeBegin - перед началом открывающегося тега
- afterBegin - после закрытия открывающегося тега
- beforeEnd - перед началом закрывающегося тега
- afterEnd - после закрытия закрывающегося тега
   JS var a = document.getElementById('out5');
   a.insertAdjacentHTML("beforeEnd","Text#5");
